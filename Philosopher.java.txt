//import java.util.concurrent.Semaphore;
import java.util.concurrent.*;
public class Philosopher extends Thread
    {
        public int number;
        public Fork leftFork;
        public Fork rightFork;
        Philosopher(int num, Fork left, Fork right) {
            number = num;
            leftFork = left;
            rightFork = right;
        }
        public void run()
        {
            think();
            eat();
        }
        void think()
        {
            System.out.println("Philosopher "+number+ " thinking...");
            Log.Late(600);
        }
        public void take_fork()
        {
            leftFork.getFork(); System.out.println("Philosopher "+number+ ": take left fork");
            rightFork.getFork(); System.out.println("Philosopher "+number+ ": take right fork");
        }
        public void put_fork()
        {
            leftFork.pushFork(); System.out.println("Philosopher "+number+ ": put left fork");
            rightFork.pushFork();System.out.println("Philosopher "+number+ ": put right fork");
        }
        public void eat()
        {
            if(!leftFork.isUsed())
            {
                if(!rightFork.isUsed())
                {
                    take_fork();
                    System.out.println("Philosopher "+number+ " eating...");
                    Log.Late(600);
                    put_fork();
                }
            }
        }
    }
    class Log{
    public static void msg(String msg)
    {
        System.out.println(msg);
    }
    public static void Late(int sleepTime)
    {
        try{
            Thread.sleep(sleepTime);
        }

        catch(InterruptedException ex){ }
    }
}
